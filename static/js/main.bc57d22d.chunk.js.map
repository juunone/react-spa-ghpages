{"version":3,"sources":["logo.svg","Layout.js","Home.js","Page.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Layout","_ref","children","react_default","a","createElement","Container","Link","to","Header","as","className","Divider","Icon","name","color","Home","src_Layout_0","Page","NotFound","size","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,ySCuBzBC,UAjBA,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,GAAG,KAAKC,UAAW,MAA3B,0CAIDT,EACDC,EAAAC,EAAAC,cAACO,EAAA,EAAD,MACAT,EAAAC,EAAAC,cAAA,KAAGM,UAAW,cAAd,aACYR,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,KAAK,QAAQC,MAAM,QADrC,kBCASC,EAXF,WACX,OACEb,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAT,sCCMOU,EAXF,WACX,OACEf,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,cCIOW,EATE,WACf,OACEhB,EAAAC,EAAAC,cAACY,EAAD,KACEd,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMC,KAAK,eAAeM,KAAK,QAAQL,MAAM,QAC7CZ,EAAAC,EAAAC,cAAA,mCCaSgB,mLAZX,OACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,SAAUC,sBAChBrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjCb,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWX,IACrCf,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOG,UAAWV,aAPVW,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAAEiC,EAAF,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc57d22d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header, Container, Divider, Icon } from 'semantic-ui-react';\n\nimport { pullRight, h1 } from './Layout.css';\n\nconst Layout = ({ children }) => {\n  return (\n    <Container>\n      <Link to=\"/\">\n        <Header as=\"h1\" className={'h1'}>\n          React SPA with CRA and deploy ghpages\n        </Header>\n      </Link>\n      {children}\n      <Divider />\n      <p className={'pull-right'}>\n        Made with <Icon name=\"heart\" color=\"red\" /> by juunone\n      </p>\n    </Container>\n  );\n};\n\nexport default Layout;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Layout from './Layout';\n\nconst Home = () => {\n  return (\n    <Layout>\n      <p>Hello World!</p>\n      <p>\n        <Link to=\"/Page\">페이지 이동</Link>\n      </p>\n    </Layout>\n  );\n};\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Layout from './Layout';\n\nconst Page = () => {\n  return (\n    <Layout>\n      <h2>또다른 페이지로 왔어요!</h2>\n      <p>\n        <Link to=\"/\">Go home</Link>\n      </p>\n    </Layout>\n  );\n};\n\nexport default Page;","import React from 'react';\nimport { Icon, Header } from 'semantic-ui-react';\n\nimport Layout from './Layout';\n\nconst NotFound = () => {\n  return (\n    <Layout>\n      <Icon name=\"minus circle\" size=\"small\" color=\"red\" />\n      <strong>Page not found!</strong>\n    </Layout>\n  );\n};\n\nexport default NotFound;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Page from './Page';\nimport NotFound from './NotFound';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/Page\" component={Page} />\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}